/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Book;
import org.openapitools.model.Error;
import org.openapitools.model.NewBook;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-31T11:52:49.322726-07:00[America/Phoenix]")

@Validated
@Api(value = "book", description = "the book API")
public interface BookApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /book
     * Get All Books
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "bookGet", notes = "Get All Books", response = Book.class, responseContainer = "List", tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class, responseContainer = "List") })
    @RequestMapping(value = "/book",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Book>> bookGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 0.8008281904610115, \"isbn\" : \"isbn\", \"id\" : 1, \"title\" : \"title\", \"authors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"title\" : \"title\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /book/{id}
     * Get a book by an id
     *
     * @param id ID of book to return (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "bookIdGet", notes = "Get a book by an id", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class) })
    @RequestMapping(value = "/book/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Book> bookIdGet(@ApiParam(value = "ID of book to return",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 0.8008281904610115, \"isbn\" : \"isbn\", \"id\" : 1, \"title\" : \"title\", \"authors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"title\" : \"title\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /book
     * Saves New Book
     *
     * @param newBook user to be added (required)
     * @return OK (status code 200)
     *         or unexpected error (status code 500)
     */
    @ApiOperation(value = "", nickname = "bookPost", notes = "Saves New Book", tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 500, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/book",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> bookPost(@ApiParam(value = "user to be added" ,required=true )  @Valid @RequestBody NewBook newBook) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
